# type Mutation {
#   createTrip(title: String, description: String, image: String, largeImage: String): Trip!
#   updateTrip(id: ID!, title: String, description: String): Trip!
#   deleteTrip(id: ID!): Trip
#   signup(email: String!, password: String!, name: String!): User!
# }

# type Query {
#   trips(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, first: Int): [Trip]!
#   trip(where: TripWhereUniqueInput!): Trip
#   tripsConnection(where: ItemWhereInput): TripConnection!
# }

type Dog {
  name: String!
}

type Mutation {
  # take in a "name" and : means return that type
  createDog(name: String!): Dog
}

type Query {
  dogs: [Dog]!
}
